CREATE DATABASE CASESTUDY1
USE casestudy1
select * from fact
select * from location
select * from product

--1. Display the number of states present in the LocationTable.
select count(distinct(state)) as no_of_states_present
from location

--2. How many products are of regular type?
select count(product) as no_of_products
from product
where type='regular'


--3. How much spending has been done on marketing of product ID 1?
select sum (marketing) as spending_on_marketing
from fact
where productid=1

--4. What is the minimum sales of a product?
select min(sales) as min_sales_of_product
from fact 


--5. Display the max Cost of Good Sold (COGS).
select max(cogs) as max_cost_of_goods_sold
from fact

--6. Display the details of the product ID where product type is coffee.
select productid
from product
where [product type]='coffee'

--7. Display the details where total expenses are greater than 40.
select *
from fact
where [total expenses]>40

--8. What is the average sales in area code 719?
select avg(Sales)
from fact
where [area code]=719

--9. Find out the total profit generated by Colorado state.select sum(f.profit) as total_profitfrom fact as finner join location as lon l.[area code]=f.[area code]where state='colorado'--10. Display the average inventory for each product ID.
select productid,avg(inventory) as avg_inventory
from fact
group by productid
order by productid 

--11. Display state in a sequential order in a LocationTable.
select distinct [state]
from location 
order by [state]

--12. Display the average budget margin where the average budget margin should be greater than 100.
select  productid,avg([budget margin]) as avg_budget_margin
from fact
group by ProductId
 having avg([budget margin]) >100

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as total_sales
from fact
where date='2010-01-01'


--14. Display the average total expense of each product ID on an individual date.
select productid,date,avg([total expenses]) as avg_total_expense
from fact
group by productid,date
order by productid,date

--15. Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.

select f.date, f.productID, p.[product type], p.product, f.sales,f. profit, l.state, f.[area code]
from fact as f
inner join location as l
on l.[area code]=f.[area code]
inner join product as p
on p.productid=f.productid

--16. Display the rank without any gap to show the sales wise rank.

select *,
dense_rank()over( order by sales desc) as rank
from fact

--17. Find the state wise profit and sales.
select l.state,sum(f.profit) as profit,sum(f.sales) as sales
from fact as f
inner join location as l
on l.[area code]=f.[area code]
group by state

--18. Find the state wise profit and sales along with the product name.

select l.state,p.product,sum(f.profit) as profit,sum(f.sales) as sales
from fact as f
inner join location as l
on l.[area code]=f.[area code]
inner join product as p
on p.productid=f.productid
group by l.state,p.product
order by l.state

--19. If there is an increase in sales of 5%, calculate the increased sales.

select * ,(sales+0.05*sales ) as new_sales,((sales+0.05*sales)-sales) as increased_sales
from fact


--20. Find the maximum profit along with the product ID and product type.
select p.productid,p.[product type],max(f.profit) as max_profit
from fact as f
inner join product as p
on p.productid=f.productid
group by  p.productid,p.[product type]

--21. Create a stored procedure to fetch the result according to the product type from ProductTable.
create procedure strfetch @producttype varchar(100)
as
 select *
 from product 
 where [product type]=@producttype
 
 
--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select *,
case
    when [total expenses]<60 then 'Profit'
	else 'Loss'
	end as result
from fact
--23. Give the total weekly sales value with the date and product ID details Use roll-up to pull the data in hierarchical order.
select DATEPART(WEEK,DATE) AS WEEK_NO, ProductId,SUM(Sales) AS SALES_VALUE
FROM FACT
GROUP BY ROLLUP  ( ProductId ,DATEPART(WEEK,DATE))

--24. Apply union and intersection operator on the tables which consist of attribute area code.
select [area code] from fact
union 
select [area code] from Location

select [area code] from fact
intersect 
select [area code] from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create function fetch_product_type( @product_type varchar(100))
returns table
as
return 
(select * from product 
where [product type]=@product_type)


--26. Change the product type from coffee to tea where product ID is 1 and undo it.
begin transaction
update Product
set [Product Type]='tea'
where ProductId=1

rollback transaction

--27. Display the date, product ID and sales where total expenses are between 100 to 200.

select date ,productid,sales
from fact 
where [total expenses] between 100 and 200

--28. Delete the records in the ProductTable for regular type.
delete from product
where type='regular'

--29. Display the ASCII value of the fifth character from the column Product.select ascii( substring(product,5,1) ) as ascii_valuefrom product